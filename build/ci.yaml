trigger:
  branches:
    include:
      - main

variables:
  - name: Projects
    value: "src/*/*.csproj"
  - name: TestProjects
    value: "src/*/*.Tests.csproj"
  - name: NUGET_PACKAGES
    value: $(Pipeline.Workspace)/.nuget/packages
  - name: BuildContainerImage
    value: davidullrich/azurepipelineagent:node-22

pool:
  name: Self-hosted

container:
  image: $(BuildContainerImage)

steps:
  # Checkout repository
  # https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/steps-checkout
  - checkout: self
    displayName: Checkout repository
    clean: "true"

  # Print environment variables
  - task: CmdLine@2
    displayName: Print environment variables
    inputs:
      script: |
        echo "Agent.JobName                         $(Agent.JobName)"
        echo "Agent.OS                              $(Agent.OS)"
        echo "Pipeline.Workspace                    $(Pipeline.Workspace)"
        echo "-----------------------------------------------------------------------------"
        echo "Build.ArtifactStagingDirectory        $(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory               $(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory                $(Build.SourcesDirectory)"
        echo "Build.BuildId                         $(Build.BuildId)"
        echo "Build.BuildNumber                     $(Build.BuildNumber)"
        echo "Build.Reason                          $(Build.Reason)"
        echo "Build.SourceBranch                    $(Build.SourceBranch)"
        echo "Build.SourceBranchName                $(Build.SourceBranchName)"
        echo "Build.Repository.ID                   $(Build.Repository.ID)"
        echo "Build.Repository.Name                 $(Build.Repository.Name)"
        echo "Build.Repository.LocalPath            $(Build.Repository.LocalPath)"
        echo "Build.Repository.Uri                  $(Build.Repository.Uri)"
        echo "-----------------------------------------------------------------------------"
        echo "System.JobName                        $(System.JobName)"
        echo "System.DefaultWorkingDirectory        $(System.DefaultWorkingDirectory)"
        echo "System.CollectionId                   $(System.CollectionId)"
        echo "System.CollectionUri                  $(System.CollectionUri)"
        echo "System.TeamProject                    $(System.TeamProject)"
        echo "System.TeamProjectId                  $(System.TeamProjectId)"
        echo "System.PullRequest.IsFork             $(System.PullRequest.IsFork)"
        echo "-----------------------------------------------------------------------------"
        echo "NUGET_PACKAGES                        $(NUGET_PACKAGES)"

  # Cache NuGet packages
  # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/cache-v2
  # https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/caching-nuget
  - task: Cache@2
    displayName: Cache NuGet packages
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      path: $(NUGET_PACKAGES)

  # Use dotnet 9.x
  - task: UseDotNet@2
    displayName: Use dotnet 9.x
    inputs:
      version: 9.x

  # Install powershell
  - task: CmdLine@2
    displayName: Install powershell
    inputs:
      script: dotnet tool install --global PowerShell

  # Restore dependencies
  - task: DotNetCoreCLI@2
    displayName: Restore dependencies
    inputs:
      command: restore
      projects: $(Projects)
      arguments: "--locked-mode"

  # Build
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: $(Projects)
      arguments: "--no-restore"

  # Test
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: $(TestProjects)
      arguments: "--no-restore --no-build"
